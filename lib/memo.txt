type LogContent struct {
	Message     string `json:"message"`
	Severity    string `json:"severity"`
	Trace       string `json:"logging.googleapis.com/trace"`
	OperationId string `json:"operationId"`
}
	var traceId string
	// Use Sscanf to extract values
	cloudTraceContext := r.Header.Get("X-Cloud-Trace-Context")
	parts := strings.Split(cloudTraceContext, "/")
	log.Printf("parts: %v", parts)
	if len(parts) >= 1 {
		traceId = parts[0]
	}

	// "projects/[プロジェクトID]/traces/[トレースID]" の形式
	trace := "projects/" + projectID + "/traces/" + traceId
	fmt.Println("Trace:", trace)

	// ------------------- zap logger --------------------------
	// conf := zap.Config{
	// 	Level: zap.NewAtomicLevel(),
	// 	// Development: false,
	// 	Encoding: "json",
	// 	EncoderConfig: zapcore.EncoderConfig{
	// 		TimeKey:        "timestamp",
	// 		LevelKey:       "severity",
	// 		NameKey:        "name",
	// 		CallerKey:      "caller",
	// 		MessageKey:     "message",
	// 		StacktraceKey:  "stacktrace",
	// 		EncodeLevel:    zapcore.LowercaseLevelEncoder,
	// 		EncodeTime:     zapcore.ISO8601TimeEncoder,
	// 		EncodeDuration: zapcore.StringDurationEncoder,
	// 		EncodeCaller:   zapcore.ShortCallerEncoder,
	// 	},
	// 	OutputPaths:      []string{"stdout"},
	// 	ErrorOutputPaths: []string{"stderr"},
	// 	// OutputPaths:      []string{"stdout", "./log/development.out.log"},
	// 	// ErrorOutputPaths: []string{"stderr", "./log/development.err.log"},
	// }
	// zaplogger, err := conf.Build()
	// if err != nil {
	// 	log.Fatalf("Failed to create zap client: %v", err)
	// }
	// defer zaplogger.Debug(
	// 	"Zap logging test",
	// 	zap.String("trace", trace),
	// 	zap.String("operationId", operationId),
	// )

	// ------------------- zap logger 2 --------------------------
	// zaplogger, err := zap.NewProduction()
	// if err != nil {
	// 	panic("Failed to initialize Zap logger")
	// }
	// defer zaplogger.Sync() // Flushes buffer, if any

	// // Log with fields
	// zaplogger.Info("### Zap logging test",
	// 	zap.String("logging.googleapis.com/trace", trace),
	// 	zap.String("operationId", operationId),
	// )

	// ------------------- log package → 構造体ログ出力できない --------------------------
	// logMessage := LogContent{
	// 	Message:     "### log package test",
	// 	Severity:    "DEBUG",
	// 	Trace:       trace,
	// 	OperationId: operationId,
	// }
	// log.Println(json.Marshal(logMessage))
